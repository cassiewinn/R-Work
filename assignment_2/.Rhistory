if (!require("plyr")) install.packages("plyr")
library(plyr)
genotypes <- read.table("fang_et_al_genotypes.txt", header = TRUE, sep="\t", stringsAsFactors = FALSE)
position <- read.table("snp_position.txt", header = TRUE, fill = TRUE, sep="\t", stringsAsFactors = FALSE)
file.info("fang_et_al_genotypes.txt")
file.info("snp_position.txt")
class(genotypes)
class(position)
colnames(genotypes)
colnames(position)
str(genotypes)
str(position)
head(genotypes)
head(position)
tail(genotypes)
tail(position)
summary(genotypes)
summary(position)
maizegroup <- c("ZMMIL", "ZMMLR", "ZMMMR")
teosintegroup <- c("ZMPBA", "ZMPIL", "ZMPJA")
maizegenotypes <- genotypes[genotypes$Group %in% maizegroup, ]
row.names(maizegenotypes) <- maizegenotypes[,1]
teosintegenotypes <- genotypes[genotypes$Group %in% teosintegroup, ]
row.names(teosintegenotypes) <- teosintegenotypes[,1]
cutmaizegenotypes <- maizegenotypes[,-1:-3]
cutteosintegenotypes <- teosintegenotypes[,-1:-3]
cutposition <- position[, c("SNP_ID","Chromosome","Position")]
transposedmaize <- as.data.frame(t(cutmaizegenotypes))
transposedteosinte <- as.data.frame(t(cutteosintegenotypes))
sortedposition <- cutposition[order(cutposition$SNP_ID),]
SNPstransposedmaize <- cbind(SNP_ID = rownames(transposedmaize), transposedmaize)
rownames(SNPstransposedmaize) <- NULL
SNPstransposedteosinte <- cbind(SNP_ID = rownames(transposedteosinte), transposedteosinte)
rownames(SNPstransposedteosinte) <- NULL
sortedmaize <- SNPstransposedmaize[order(SNPstransposedmaize$SNP_ID),]
sortedteosinte <- SNPstransposedteosinte[order(SNPstransposedteosinte$SNP_ID),]
joinedmaize <- merge(sortedposition, sortedmaize, by.x="SNP_ID", by.y="SNP_ID")
joinedteosinte <- merge(sortedposition, sortedteosinte, by.x="SNP_ID", by.y="SNP_ID")
library(gtools)
ordermaizeincrease <- joinedmaize[mixedorder(joinedmaize$Position),]
library(gtools)
orderteosinteincrease <- joinedteosinte[mixedorder(joinedteosinte$Position),]
library(dplyr)
maize_no_ambig <- subset(ordermaizeincrease, ordermaizeincrease$Chromosome!="unknown" & ordermaizeincrease$Chromosome!="multiple")
MaizeChromosomeQ <- tbl_df(maize_no_ambig)
filewriteTQ  = function(DF) {
write.table(DF,file = paste0("Maize_Chromosome_Q",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
MaizeChromosomeQ %>%
group_by(Chromosome) %>%
do(filewriteTQ(.))
teosinte_no_ambig <- subset(orderteosinteincrease, orderteosinteincrease$Chromosome!="unknown" & orderteosinteincrease$Chromosome!="multiple")
TeosinteChromosomeQ <- tbl_df(teosinte_no_ambig)
filewriteTQ  = function(DF) {
write.table(DF,file = paste0("Teosinte_Chromosome_Q",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
TeosinteChromosomeQ %>%
group_by(Chromosome) %>%
do(filewriteTQ(.))
dashunknownmazie <- as.data.frame(lapply(joinedmaize, function(x) {gsub("\\?","-", x)}))
dashunknownteosinte <- as.data.frame(lapply(joinedteosinte, function(x) {gsub("\\?","-", x)}))
library(gtools)
ordermaizedecrease <- dashunknownmazie[mixedorder(as.character(dashunknownmazie$Position), decreasing=TRUE),]
library(gtools)
orderteosintedecrease <- dashunknownteosinte[mixedorder(as.character(dashunknownteosinte$Position), decreasing=TRUE),]
library(dplyr)
maize_no_ambig2 <- subset(ordermaizedecrease, ordermaizedecrease$Chromosome!="unknown" & ordermaizedecrease$Chromosome!="multiple")
MaizeChromosomeDecrease <- tbl_df(maize_no_ambig2)
filewriteMD  = function(DF) {
write.table(DF,file = paste0("Maize_Chromosome_Decrease",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
MaizeChromosomeDecrease %>%
group_by(Chromosome) %>%
do(filewriteMD(.))
library(dplyr)
teosinte_no_ambig2 <- subset(orderteosintedecrease, orderteosintedecrease$Chromosome!="unknown" & orderteosintedecrease$Chromosome!="multiple")
teosinteChromosomeDecrease <- tbl_df(teosinte_no_ambig2)
filewriteMD  = function(DF) {
write.table(DF,file = paste0("teosinte_Chromosome_Decrease",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
teosinteChromosomeDecrease %>%
group_by(Chromosome) %>%
do(filewriteMD(.))
genotypes <- read.csv("fang_et_al_genotypes.txt", sep="\t")
snp <- read.csv("snp_position.txt", sep="\t", fill = TRUE)
transposed_genotypes <- as.data.frame(t(genotypes[,-1]))
colnames(transposed_genotypes) <- genotypes$Sample_ID
merged_data <- merge(x = snp[,c(1,3,4)], y = transposed_genotypes, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
merged_data <- merged_data[-c(984,985),]
ggplot(merged_data, aes((Chromosome))) + geom_bar()
ggplot(genotypes, aes(Group)) +
geom_bar()
headers_names<- colnames(genotypes)[-c(1:3)]
genotypes_melted <- melt(genotypes, measure.vars = headers_names)
genotypes_melted[ genotypes_melted == "?/?" ] = NA
genotypes_melted$isHomozygous <- (genotypes_melted$value=="A/A" | genotypes_melted$value=="C/C" | genotypes_melted$value=="G/G" | genotypes_melted$value=="T/T")
genotypes_sorted_by_ID <- genotypes_melted[order(genotypes_melted$Sample_ID),]
genotypes_sorted_by_Group <- genotypes_melted[order(genotypes_melted$Group),]
counting_ID <- ddply(genotypes_sorted_by_ID, c("Sample_ID"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_ID_melt <- melt(counting_ID, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_ID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
counting_Group <- ddply(genotypes_sorted_by_Group, c("Group"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_Group_melt <- melt(counting_Group, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_Group_melt,aes(x = Group, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
headers_names_joint<- colnames(merged_data)[-c(1:3)]
genotypes_melted_joint <- melt(merged_data, measure.vars = headers_names_joint)
genotypes_melted_joint[ genotypes_melted_joint == "?/?" ] = NA
genotypes_melted_joint$isHomozygous <- (genotypes_melted_joint$value=="A/A" | genotypes_melted_joint$value=="C/C" | genotypes_melted_joint$value=="G/G" | genotypes_melted_joint$value=="T/T")
genotypes_sorted_by_SNP <- genotypes_melted_joint[order(genotypes_melted_joint$SNP_ID),]
Observed_Het_per_locus <- ddply(genotypes_sorted_by_SNP, c("SNP_ID"), summarise, heterozygocity_count=sum(!isHomozygous, na.rm=TRUE), total_count=sum(!is.na(isHomozygous)))
Observed_Het_per_locus$Obs_heterozygocity <- (Observed_Het_per_locus$heterozygocity_count/Observed_Het_per_locus$total_count)
Observed_Het_per_locus_melt <- melt(Observed_Het_per_locus, measure.vars = "Obs_heterozygocity")
ggplot(Observed_Het_per_locus_melt,aes(x = SNP_ID, y= value, fill=variable)) + geom_point()
genotype2 <- genotypes[,-2]
melted <- melt(genotype2,id=c("Sample_ID","Group"))
colnames(melted)[3:4] <- c("SNP_ID","SNP_Call")
pos <- as.data.frame(read.table("snp_position.txt", sep="\t",header=TRUE))
redPos <- pos[,c(1,3,4)]
meltedPos <- merge(redPos,melted,by = "SNP_ID")
convert <- function(x) {
if ( x == "A/A" | x == "C/C" | x == "G/G" | x == "T/T") {
return(x)
}
else if (x == "?/?") {
return("N")
}
else {return("H")}
}
meltedPos$Converted <- lapply(meltedPos$SNP_Call,convert)
meltedPos$Converted <- as.character(meltedPos$Converted)
meltedPos <- na.omit(meltedPos) #Removed missing chr/pos data
meltedPosGrp <- meltedPos[,c(2,5,7)] #Reduces columns, only want Chr, Grp, Converted SNP data
##Now I want to summarize by the different SNP types. I am interested in visualizing distrubution
##of SNPs across chromosomes and groups.
meltedPos <- merge(redPos,melted,by = "SNP_ID")
genotype2 <- genotype[,-2]
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("gtools")) install.packages("gtools")
library(gtools)
if (!require("reshape2")) install.packages("reshape2")
library("reshape2")
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("plyr")) install.packages("plyr")
library(plyr)
genotypes <- read.table("fang_et_al_genotypes.txt", header = TRUE, sep="\t", stringsAsFactors = FALSE)
position <- read.table("snp_position.txt", header = TRUE, fill = TRUE, sep="\t", stringsAsFactors = FALSE)
file.info("fang_et_al_genotypes.txt")
file.info("snp_position.txt")
class(genotypes)
class(position)
colnames(genotypes)
colnames(position)
str(genotypes)
str(position)
head(genotypes)
head(position)
tail(genotypes)
tail(position)
summary(genotypes)
summary(position)
maizelines <- c("ZMMIL", "ZMMLR", "ZMMMR")
teosintelines <- c("ZMPBA", "ZMPIL", "ZMPJA")
maizegenotypes <- genotypes[genotypes$Group %in% maizelines, ]
row.names(maizegenotypes) <- maizegenotypes[,1]
teosintegenotypes <- genotypes[genotypes$Group %in% teosintelines, ]
row.names(teosintegenotypes) <- teosintegenotypes[,1]
cutmaizegenotypes <- maizegenotypes[,-1:-3]
cutteosintegenotypes <- teosintegenotypes[,-1:-3]
cutposition <- position[, c("SNP_ID","Chromosome","Position")]
transposedmaize <- as.data.frame(t(cutmaizegenotypes))
transposedteosinte <- as.data.frame(t(cutteosintegenotypes))
is.data.frame(transposedmaize)
is.data.frame(transposedteosinte)
sortedtransposedsnpID <- cutposition[order(cutposition$SNP_ID),]
SNPstransposedmaize <- cbind(SNP_ID = rownames(transposedmaize), transposedmaize)
rownames(SNPstransposedmaize) <- NULL
SNPstransposedteosinte <- cbind(SNP_ID = rownames(transposedteosinte), transposedteosinte)
rownames(SNPstransposedteosinte) <- NULL
sortmaize <- SNPstransposedmaize[order(SNPstransposedmaize$SNP_ID),]
sortteosinte <- SNPstransposedteosinte[order(SNPstransposedteosinte$SNP_ID),]
joinmaize <- merge(sortedtransposedsnpID, sortmaize, by.x="SNP_ID", by.y="SNP_ID")
jointeosinte <- merge(sortedtransposedsnpID, sortteosinte, by.x="SNP_ID", by.y="SNP_ID")
library(gtools)
orderincreasemaize <- joinmaize[mixedorder(joinmaize$Position),]
library(gtools)
orderincreaseteosinte <- jointeosinte[mixedorder(jointeosinte$Position),]
library(dplyr)
Removeunknownchr <- subset(orderincreasemaize, orderincreasemaize$Chromosome!="unknown" & orderincreasemaize$Chromosome!="multiple")
Maizeknownchr <- tbl_df(Removeunknownchr)
filewriteTQ  = function(DF) {
write.table(DF,file = paste0("Maize_Chromosome",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
Maizeknownchr %>%
group_by(Chromosome) %>%
do(filewriteTQ(.))
Removeunknownchr <- subset(orderincreaseteosinte, orderincreaseteosinte$Chromosome!="unknown" & orderincreaseteosinte$Chromosome!="multiple")
teosinteknownchr <- tbl_df(Removeunknownchr)
filewriteTQ  = function(DF) {
write.table(DF,file = paste0("Teosinte_Chromosome",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
teosinteknownchr %>%
group_by(Chromosome) %>%
do(filewriteTQ(.))
dashunknownmazie <- as.data.frame(lapply(joinmaize, function(x) {gsub("\\?","-", x)}))
dashunknownteosinte <- as.data.frame(lapply(jointeosinte, function(x) {gsub("\\?","-", x)}))
library(gtools)
ordermaizedecrease <- dashunknownmazie[mixedorder(as.character(dashunknownmazie$Position), decreasing=TRUE),]
library(gtools)
orderteosintedecrease <- dashunknownteosinte[mixedorder(as.character(dashunknownteosinte$Position), decreasing=TRUE),]
library(dplyr)
removeunknownchrdashmaize <- subset(ordermaizedecrease, ordermaizedecrease$Chromosome!="unknown" & ordermaizedecrease$Chromosome!="multiple")
MaizeChromosomeDecrease <- tbl_df(removeunknownchrdashmaize)
filewriteMD  = function(DF) {
write.table(DF,file = paste0("Maize_Chromosome_Decrease",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
MaizeChromosomeDecrease %>%
group_by(Chromosome) %>%
do(filewriteMD(.))
library(dplyr)
removeunknownchrdashteosinte <- subset(orderteosintedecrease, orderteosintedecrease$Chromosome!="unknown" & orderteosintedecrease$Chromosome!="multiple")
teosinteChromosomeDecrease <- tbl_df(removeunknownchrdashteosinte)
filewriteMD  = function(DF) {
write.table(DF,file = paste0("teosinte_Chromosome_Decrease",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
teosinteChromosomeDecrease %>%
group_by(Chromosome) %>%
do(filewriteMD(.))
genotypes <- read.csv("fang_et_al_genotypes.txt", sep="\t")
position <- read.csv("snp_position.txt", sep="\t", fill = TRUE)
transposed_genotypes <- as.data.frame(t(genotypes[,-1]))
colnames(transposed_genotypes) <- genotypes$Sample_ID
merged_data <- merge(x = position[,c(1,3,4)], y = transposed_genotypes, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
merged_data <- merged_data[-c(984,985),]
ggplot(merged_data, aes((Chromosome))) + geom_bar()
ggplot(genotypes, aes(Group)) +
geom_bar()
headers_names<- colnames(genotypes)[-c(1:3)]
genotypes_melted <- melt(genotypes, measure.vars = headers_names)
genotypes_melted[ genotypes_melted == "?/?" ] = NA
genotypes_melted$isHomozygous <- (genotypes_melted$value=="A/A" | genotypes_melted$value=="C/C" | genotypes_melted$value=="G/G" | genotypes_melted$value=="T/T")
genotypes_sorted_by_ID <- genotypes_melted[order(genotypes_melted$Sample_ID),]
genotypes_sorted_by_Group <- genotypes_melted[order(genotypes_melted$Group),]
counting_ID <- ddply(genotypes_sorted_by_ID, c("Sample_ID"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_ID_melt <- melt(counting_ID, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_ID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
counting_Group <- ddply(genotypes_sorted_by_Group, c("Group"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_Group_melt <- melt(counting_Group, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_Group_melt,aes(x = Group, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
headers_names_joint<- colnames(merged_data)[-c(1:3)]
genotypes_melted_joint <- melt(merged_data, measure.vars = headers_names_joint)
genotypes_melted_joint[ genotypes_melted_joint == "?/?" ] = NA
genotypes_melted_joint$isHomozygous <- (genotypes_melted_joint$value=="A/A" | genotypes_melted_joint$value=="C/C" | genotypes_melted_joint$value=="G/G" | genotypes_melted_joint$value=="T/T")
genotypes_sorted_by_SNP <- genotypes_melted_joint[order(genotypes_melted_joint$SNP_ID),]
Observed_Het_per_locus <- ddply(genotypes_sorted_by_SNP, c("SNP_ID"), summarise, heterozygocity_count=sum(!isHomozygous, na.rm=TRUE), total_count=sum(!is.na(isHomozygous)))
Observed_Het_per_locus$Obs_heterozygocity <- (Observed_Het_per_locus$heterozygocity_count/Observed_Het_per_locus$total_count)
Observed_Het_per_locus_melt <- melt(Observed_Het_per_locus, measure.vars = "Obs_heterozygocity")
ggplot(Observed_Het_per_locus_melt,aes(x = SNP_ID, y= value, fill=variable)) + geom_point()
genotype2 <- genotypes[,-2]
melted <- melt(genotype2,id=c("Sample_ID","Group"))
colnames(melted)[3:4] <- c("SNP_ID","SNP_Call")
pos <- as.data.frame(read.table("snp_position.txt", sep="\t",header=TRUE))
redPos <- pos[,c(1,3,4)]
meltedPos <- merge(redPos,melted,by = "SNP_ID")
convert <- function(x) {
if ( x == "A/A" | x == "C/C" | x == "G/G" | x == "T/T") {
return(x)
}
else if (x == "?/?") {
return("N")
}
else {return("H")}
}
meltedPos$Converted <- lapply(meltedPos$SNP_Call,convert)
meltedPos$Converted <- as.character(meltedPos$Converted)
meltedPos <- na.omit(meltedPos) #Removed missing chr/pos data
meltedPosGrp <- meltedPos[,c(2,5,7)] #Reduces columns, only want Chr, Grp, Converted SNP data
##Now I want to summarize by the different SNP types. I am interested in visualizing distrubution
##of SNPs across chromosomes and groups.
meltedPos <- merge(redPos,melted,by = "SNP_ID")
genotype2 <- genotype[,-2]
genotypes <- read.csv("fang_et_al_genotypes.txt", sep="\t")
snp <- read.csv("snp_position.txt", sep="\t")
str(genotypes)
nrow(genotypes)
ncol(genotypes)
dim(genotypes)
str(snp)
nrow(snp)
ncol(snp)
dim(snp)
file.size("fang_et_al_genotypes.txt")
file.size("snp_position.txt")
tripsacum <- genotypes[genotypes$Group=="ZMMIL" | genotypes$Group=="ZMMLR" | genotypes$Group=="ZMMMR", ]
teosinte <- genotypes[genotypes$Group=="ZMPBA" | genotypes$Group=="ZMPIL" | genotypes$Group=="ZMPJA", ]
snp_id_chr_pos <-snp[,c(1,3,4)]
transposed_teosinte <- as.data.frame(t(teosinte[,-1]))
colnames(transposed_teosinte) <- teosinte$Sample_ID
transposed_tripsacum <- as.data.frame(t(tripsacum[,-1]))
colnames(transposed_tripsacum) <- tripsacum$Sample_ID
teosinte_joint <- merge(x = snp_id_chr_pos, y = transposed_teosinte, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
tripsacum_joint <- merge(x = snp_id_chr_pos, y = transposed_tripsacum, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
teosinte_joint$Position <- as.numeric(as.character(teosinte_joint$Position))
teosinte_joint$Chromosome <- as.numeric(as.character(teosinte_joint$Chromosome))
teosinte_joint <- teosinte_joint[!(teosinte_joint$Position== "unknown") | !(teosinte_joint$Chromosome== "unknown") | !(teosinte_joint$Chromosome== "multiple"),]
teosinte_joint <- teosinte_joint[!(is.na(teosinte_joint$Position)),]
tripsacum_joint$Position <- as.numeric(as.character(tripsacum_joint$Position))
tripsacum_joint$Chromosome <- as.numeric(as.character(tripsacum_joint$Chromosome))
tripsacum_joint <- tripsacum_joint[!(tripsacum_joint$Position== "unknown") | !(tripsacum_joint$Chromosome== "unknown") | !(tripsacum_joint$Chromosome== "multiple"),]
tripsacum_joint <- tripsacum_joint[!(is.na(tripsacum_joint$Position)),]
teosinte_joint <- teosinte_joint[order(teosinte_joint$Position),]
tripsacum_joint <- tripsacum_joint[order(tripsacum_joint$Position),]
teosinte_split <- split(teosinte_joint, teosinte_joint$Chromosome)
allNames <- names(teosinte_split)
for(thisName in allNames){
saveName = paste0('Chr_', thisName, '_teosinte.txt')
write.table(teosinte_split[[thisName]], file = saveName, quote = FALSE, sep="\t", row.names = FALSE)
}
tripsacum_split <- split(tripsacum_joint, tripsacum_joint$Chromosome)
allNames <- names(tripsacum_split)
for(thisName in allNames){
saveName = paste0('Chr_', thisName, '_tripsacum.txt')
write.table(tripsacum_split[[thisName]], file = saveName, quote = FALSE, sep="\t", row.names = FALSE)
}
teosinte_joint_rev <- teosinte_joint[order(teosinte_joint$Position, decreasing=T),]
tripsacum_joint_rev <- tripsacum_joint[order(tripsacum_joint$Position, decreasing=T),]
teosinte_joint_rev[] <- lapply(teosinte_joint_rev, as.character)
teosinte_joint_rev[teosinte_joint_rev == '?/?'] <- '-/-'
tripsacum_joint_rev[] <- lapply(tripsacum_joint_rev, as.character)
tripsacum_joint_rev[tripsacum_joint_rev == '?/?'] <- '-/-'
teosinte_split_rev <- split(teosinte_joint_rev, teosinte_joint_rev$Chromosome)
allNames <- names(teosinte_split_rev)
for(thisName in allNames){
saveName = paste0('Chr_', thisName, '_teosinte_rev.txt')
write.table(teosinte_split_rev[[thisName]], file = saveName, quote = FALSE, sep="\t", row.names = FALSE)
}
tripsacum_split_rev <- split(tripsacum_joint_rev, tripsacum_joint_rev$Chromosome)
allNames <- names(tripsacum_split_rev)
for(thisName in allNames){
saveName = paste0('Chr_', thisName, '_tripsacum_rev.txt')
write.table(tripsacum_split_rev[[thisName]], file = saveName, quote = FALSE, sep="\t", row.names = FALSE)
}
transposed_genotypes <- as.data.frame(t(genotypes[,-1]))
colnames(transposed_genotypes) <- genotypes$Sample_ID
genotypes_joint <- merge(x = snp_id_chr_pos, y = transposed_genotypes, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
if (!require("reshape2")) install.packages("reshape2")
library("reshape2")
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("plyr")) install.packages("plyr")
library(plyr)
genotypes_joint$Chromosome <- factor(genotypes_joint$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
ggplot(genotypes_joint, aes((Chromosome))) + geom_bar()
ggplot(genotypes, aes(Group)) +
geom_bar()
headers_names<- colnames(genotypes)[-c(1:3)]
genotypes_melted <- melt(genotypes, measure.vars = headers_names)
genotypes_melted[ genotypes_melted == "?/?" ] = NA
genotypes_melted$isHomozygous <- (genotypes_melted$value=="A/A" | genotypes_melted$value=="C/C" | genotypes_melted$value=="G/G" | genotypes_melted$value=="T/T")
genotypes_sorted_by_ID <- genotypes_melted[order(genotypes_melted$Sample_ID),]
genotypes_sorted_by_Group <- genotypes_melted[order(genotypes_melted$Group),]
counting_ID <- ddply(genotypes_sorted_by_ID, c("Sample_ID"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_ID_melt <- melt(counting_ID, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_ID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
counting_Group <- ddply(genotypes_sorted_by_Group, c("Group"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_Group_melt <- melt(counting_Group, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_Group_melt,aes(x = Group, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
headers_names_joint<- colnames(genotypes_joint)[-c(1:3)]
genotypes_melted_joint <- melt(genotypes_joint, measure.vars = headers_names_joint)
genotypes_melted_joint[ genotypes_melted_joint == "?/?" ] = NA
genotypes_melted_joint$isHomozygous <- (genotypes_melted_joint$value=="A/A" | genotypes_melted_joint$value=="C/C" | genotypes_melted_joint$value=="G/G" | genotypes_melted_joint$value=="T/T")
genotypes_sorted_by_SNP <- genotypes_melted_joint[order(genotypes_melted_joint$SNP_ID),]
Observed_Het_per_locus <- ddply(genotypes_sorted_by_SNP, c("SNP_ID"), summarise, heterozygocity_count=sum(!isHomozygous, na.rm=TRUE), total_count=sum(!is.na(isHomozygous)))
Observed_Het_per_locus$Obs_heterozygocity <- (Observed_Het_per_locus$heterozygocity_count/Observed_Het_per_locus$total_count)
Observed_Het_per_locus_melt <- melt(Observed_Het_per_locus, measure.vars = "Obs_heterozygocity")
ggplot(Observed_Het_per_locus_melt,aes(x = SNP_ID, y= value, fill=variable)) + geom_point()
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("gtools")) install.packages("gtools")
library(gtools)
if (!require("reshape2")) install.packages("reshape2")
library("reshape2")
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("plyr")) install.packages("plyr")
library(plyr)
genotypes <- read.table("fang_et_al_genotypes.txt", header = TRUE, sep="\t", stringsAsFactors = FALSE)
position <- read.table("snp_position.txt", header = TRUE, fill = TRUE, sep="\t", stringsAsFactors = FALSE)
file.info("fang_et_al_genotypes.txt")
file.info("snp_position.txt")
class(genotypes)
class(position)
colnames(genotypes)
colnames(position)
str(genotypes)
str(position)
head(genotypes)
head(position)
tail(genotypes)
tail(position)
summary(genotypes)
summary(position)
maizelines <- c("ZMMIL", "ZMMLR", "ZMMMR")
teosintelines <- c("ZMPBA", "ZMPIL", "ZMPJA")
maizegenotypes <- genotypes[genotypes$Group %in% maizelines, ]
row.names(maizegenotypes) <- maizegenotypes[,1]
teosintegenotypes <- genotypes[genotypes$Group %in% teosintelines, ]
row.names(teosintegenotypes) <- teosintegenotypes[,1]
cutmaizegenotypes <- maizegenotypes[,-1:-3]
cutteosintegenotypes <- teosintegenotypes[,-1:-3]
cutposition <- position[, c("SNP_ID","Chromosome","Position")]
transposedmaize <- as.data.frame(t(cutmaizegenotypes))
transposedteosinte <- as.data.frame(t(cutteosintegenotypes))
is.data.frame(transposedmaize)
is.data.frame(transposedteosinte)
sortedtransposedsnpID <- cutposition[order(cutposition$SNP_ID),]
SNPstransposedmaize <- cbind(SNP_ID = rownames(transposedmaize), transposedmaize)
rownames(SNPstransposedmaize) <- NULL
SNPstransposedteosinte <- cbind(SNP_ID = rownames(transposedteosinte), transposedteosinte)
rownames(SNPstransposedteosinte) <- NULL
sortmaize <- SNPstransposedmaize[order(SNPstransposedmaize$SNP_ID),]
sortteosinte <- SNPstransposedteosinte[order(SNPstransposedteosinte$SNP_ID),]
joinmaize <- merge(sortedtransposedsnpID, sortmaize, by.x="SNP_ID", by.y="SNP_ID")
jointeosinte <- merge(sortedtransposedsnpID, sortteosinte, by.x="SNP_ID", by.y="SNP_ID")
library(gtools)
orderincreasemaize <- joinmaize[mixedorder(joinmaize$Position),]
library(gtools)
orderincreaseteosinte <- jointeosinte[mixedorder(jointeosinte$Position),]
library(dplyr)
Removeunknownchr <- subset(orderincreasemaize, orderincreasemaize$Chromosome!="unknown" & orderincreasemaize$Chromosome!="multiple")
Maizeknownchr <- tbl_df(Removeunknownchr)
filewriteTQ  = function(DF) {
write.table(DF,file = paste0("Maize_Chromosome",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
Maizeknownchr %>%
group_by(Chromosome) %>%
do(filewriteTQ(.))
Removeunknownchr <- subset(orderincreaseteosinte, orderincreaseteosinte$Chromosome!="unknown" & orderincreaseteosinte$Chromosome!="multiple")
teosinteknownchr <- tbl_df(Removeunknownchr)
filewriteTQ  = function(DF) {
write.table(DF,file = paste0("Teosinte_Chromosome",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
teosinteknownchr %>%
group_by(Chromosome) %>%
do(filewriteTQ(.))
dashunknownmazie <- as.data.frame(lapply(joinmaize, function(x) {gsub("\\?","-", x)}))
dashunknownteosinte <- as.data.frame(lapply(jointeosinte, function(x) {gsub("\\?","-", x)}))
library(gtools)
ordermaizedecrease <- dashunknownmazie[mixedorder(as.character(dashunknownmazie$Position), decreasing=TRUE),]
library(gtools)
orderteosintedecrease <- dashunknownteosinte[mixedorder(as.character(dashunknownteosinte$Position), decreasing=TRUE),]
library(dplyr)
removeunknownchrdashmaize <- subset(ordermaizedecrease, ordermaizedecrease$Chromosome!="unknown" & ordermaizedecrease$Chromosome!="multiple")
MaizeChromosomeDecrease <- tbl_df(removeunknownchrdashmaize)
filewriteMD  = function(DF) {
write.table(DF,file = paste0("Maize_Chromosome_Decrease",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
MaizeChromosomeDecrease %>%
group_by(Chromosome) %>%
do(filewriteMD(.))
library(dplyr)
removeunknownchrdashteosinte <- subset(orderteosintedecrease, orderteosintedecrease$Chromosome!="unknown" & orderteosintedecrease$Chromosome!="multiple")
teosinteChromosomeDecrease <- tbl_df(removeunknownchrdashteosinte)
filewriteMD  = function(DF) {
write.table(DF,file = paste0("teosinte_Chromosome_Decrease",unique(DF$Chromosome),".txt"), sep = "\t", row.names = FALSE)
return(DF)
}
teosinteChromosomeDecrease %>%
group_by(Chromosome) %>%
do(filewriteMD(.))
genotypes <- read.csv("fang_et_al_genotypes.txt", sep="\t")
position <- read.csv("snp_position.txt", sep="\t", fill = TRUE)
transposed_genotypes <- as.data.frame(t(genotypes[,-1]))
colnames(transposed_genotypes) <- genotypes$Sample_ID
merged_data <- merge(x = position[,c(1,3,4)], y = transposed_genotypes, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
merged_data <- merged_data[-c(984,985),]
ggplot(merged_data, aes((Chromosome))) + geom_bar()
ggplot(genotypes, aes(Group)) +
geom_bar()
headers_names<- colnames(genotypes)[-c(1:3)]
genotypes_melted <- melt(genotypes, measure.vars = headers_names)
genotypes_melted[ genotypes_melted == "?/?" ] = NA
genotypes_melted$isHomozygous <- (genotypes_melted$value=="A/A" | genotypes_melted$value=="C/C" | genotypes_melted$value=="G/G" | genotypes_melted$value=="T/T")
genotypes_sorted_by_ID <- genotypes_melted[order(genotypes_melted$Sample_ID),]
genotypes_sorted_by_Group <- genotypes_melted[order(genotypes_melted$Group),]
counting_ID <- ddply(genotypes_sorted_by_ID, c("Sample_ID"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_ID_melt <- melt(counting_ID, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_ID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
counting_Group <- ddply(genotypes_sorted_by_Group, c("Group"), summarise, counting_homozygous=sum(isHomozygous, na.rm=TRUE), counting_heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_Group_melt <- melt(counting_Group, measure.vars = c("counting_homozygous", "counting_heterozygous", "isNA"))
ggplot(counting_Group_melt,aes(x = Group, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
headers_names_joint<- colnames(merged_data)[-c(1:3)]
genotypes_melted_joint <- melt(merged_data, measure.vars = headers_names_joint)
genotypes_melted_joint[ genotypes_melted_joint == "?/?" ] = NA
genotypes_melted_joint$isHomozygous <- (genotypes_melted_joint$value=="A/A" | genotypes_melted_joint$value=="C/C" | genotypes_melted_joint$value=="G/G" | genotypes_melted_joint$value=="T/T")
genotypes_sorted_by_SNP <- genotypes_melted_joint[order(genotypes_melted_joint$SNP_ID),]
Observed_Het_per_locus <- ddply(genotypes_sorted_by_SNP, c("SNP_ID"), summarise, heterozygocity_count=sum(!isHomozygous, na.rm=TRUE), total_count=sum(!is.na(isHomozygous)))
Observed_Het_per_locus$Obs_heterozygocity <- (Observed_Het_per_locus$heterozygocity_count/Observed_Het_per_locus$total_count)
Observed_Het_per_locus_melt <- melt(Observed_Het_per_locus, measure.vars = "Obs_heterozygocity")
ggplot(Observed_Het_per_locus_melt,aes(x = SNP_ID, y= value, fill=variable)) + geom_point()
